name: stg-release
on:
  push:
    branches:
      - main
    tags-ignore:
      - 'v*'

  # allow manual dispatch on action tab
  workflow_dispatch:
permissions:
  contents: read    # This is required for actions/checkout
jobs:
  check-current-branch:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current branch
        id: check_step
        # 1. Get the list of branches ref where this tag exists
        # 2. Remove 'origin/' from that result
        # 3. Put that string in output
        # => We can now use function 'contains(list, item)''
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch="$(echo ${raw//origin\//} | tr -d '\n')"
          echo "{name}=branch" >> $GITHUB_OUTPUT
          echo "Branches where this tag exists : $branch."

  the-graph-deploy-sei-stg:
    runs-on: ubuntu-latest
    # Wait for check step to finish
    needs: check-current-branch
    # only run if tag is present on branch 'main'
    if: contains(${{ needs.check.outputs.branch }}, 'main')`

    # it is required for reading secrets
    environment: prod
    steps:
      - uses: actions/setup-node@v4

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-main-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-main-

      - name: Git clone the repository
        uses: actions/checkout@v4

      - run: yarn install --prefer-offline
      - run: echo "./node_modules/.bin" >> $GITHUB_PATH
      - name: build ./subgraph.sei.yaml
        run: graph codegen --output-dir src/types/ ./subgraph.sei.yaml && graph build ./subgraph.sei.yaml
      - name: deploy ./subgraph.sei.yaml (stg)
        run: graph auth --studio ${{ secrets.THEGRAPH_SEI_STG_AUTH_KEY }} && graph deploy --version-label="$(git rev-parse --short HEAD)" --studio encryptx-miro-sei-stg ./subgraph.sei.yaml